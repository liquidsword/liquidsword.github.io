---
layout: post
title:      "The journey from Ruby on Rails to Javascript"
date:       2019-02-18 18:11:54 +0000
permalink:  the_journey_from_ruby_on_rails_to_javascript
---


I really enjoyed learning Ruby and Rails, it was a lot of knowledge to decipher and get comfortable with. Classes, objects and the MVC paradigm was a lot to understand and put into action. But I did it, and while learning it I noticed some things that kind of put me off. One of those things were the bugs that would pop up ever so often due to incorrect code that didn't fall well into the MVC universe. For instance, if I wrote a piece of code in my model that didn't coincide with my controller, there would be trouble, and lots of it. However, in retrospect, those bugs aided me in acquiring the knowledge on how to fix them and how to become a better detective. Google, Stackerflow, rubyonrails.org, and Github were my detective/problemsolver tools. Any new programmer will find them indispensible. Most of the questions I had I could find the answers using those tools because other programmers most likely ran into similar situations before.

Even though I'm brand new to using Javascript, the differences between object oriented programming and functional programming is like night and day.  For me functional programming seems a little easier because there are less moving parts to be aware of and the code seems a bit cleaner and more functional. For instance, in object oriented programming you can have unused code throughout your application taking up space and memory not to mention that unused code can become confusing if you're working on a team that will eventually look at your code. On the other hand, functional programming is just what it says it is, functional. The functions that you write are specific to the application. So aside from my coursework I decided to read a few blogs on Javascript and what makes it so significantly different from Ruby and low and behold two things kept popping up: prototypal inheritance and functional programming. To sum up prototypal inheritance, it's basically objects without classes and objects linking other objects, or what some like to refer to as OLOO. It leaves the classical inheritance i.e. parent - child relationship behind. Leaving that behind also leaves behind the bugs that I have gotten so use to seeing in my Ruby code. It also leaves behind the unnecessary code that may be inherited from one object to another which makes the code in some applications look very cluttered. I'm excited to embark on my Javascript journey, there is so much I look forward to.
